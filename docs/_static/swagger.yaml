# A Swagger 2.0 (a.k.a. OpenAPI) definition of the Entity Service API.
#
# This is used for generating API documentation and the types used by the
# server.
#
# Some style notes:
# - This file is used by ReDoc, which allows GitHub Flavored Markdown in
#   descriptions.
swagger: '2.0'
info:
  version: '1.2'
  title: Entity Matching API
  x-logo:
    url: http://clkhash.readthedocs.io/en/latest/_static/logo.svg
  contact:
    name: 'Confidential Computing, Data61 | CSIRO'
    email: support@n1analytics.com
  description: >-
    Allows two organisations to carry out private record linkage -
    without disclosing personally identifiable information.

    In general:

    * All parameters and returned objects are JSON with content-type set to
    `"application/json"`.

    * All authentication tokens are 48 character hex strings.

    * The resource identifiers are also 48 char hex strings.

    * HTTP status codes are used to distinguish server outcomes.


    **Note:** Several important concepts including security considerations are described in
    [separate documentation](./concepts.html).

    ### Introduction

    This is a service that computes matches of entity records between two parties.
    The personally identifiable information used for linking is first locally transformed
    to anonymous linking codes called [Cryptographic Longterm Keys](concepts.html#cryptographic-longterm-key)
    (CLKs). Each party then uploads its CLKs to the service for matching.
    The service supports four different [types of outputs](concepts.html#result-types)
    of matching results, varying in privacy properties.
    For the CLKs to be comparable, the parties need to agree on and follow a particular
    [linkage schema](concepts.html#schema) and agree on a shared secret before generating
    and uploading the CLKs.


    ### Security

    See the linked [security documentation](./security.html).


    __Warning__: There are no restrictions on accessing the service, i.e., everyone can call the different endpoints.
    However, authorization is required to access sensitive data. The authorization is described [here](security.html#auth).


    ### Generating CLKs

    See the [clkhash](https://github.com/n1analytics/clkhash) project for details and a command line
    tool to locally generate CLKs from entity data to upload.



    ## Matching Protocols

    The Entity Service supports four different **result types** with varying privacy properties which define the produced result,
    and who may see the which part of the output.

    See the documentation section on [output types](./concepts.html#result-types).

    The options are:

      * `"permutation"` - Creates random permutations and Paillier encrypted mask.
      * `"mapping"` - Creates a lookup table of the form `indexA = indexB`.
      * `"permutation_unencrypted_mask"` - Creates random permutations and an unencrypted mask.
      * `"similarity_scores"` - Outputs a list of similarity scores of `[indexA, indexB, score]`, where `score`
        represents the likelihood that `indexA = indexB`.



host: es.data61.xyz
schemes:
  - "https"
basePath: /api/v1
produces:
  - application/json
consumes:
  - application/json
paths:
  /status:
    get:
      summary: Service status
      description: |
        Suitable for using as load balancer health check. Checks that
        redis cache and database are operational. Provides very high level system wide
        metrics.
      responses:
        '200':
          description: Service status.
          schema:
            type: object
            properties:
              status:
                type: string
                description: Will be "ok" if everything is working.
              number_mappings:
                type: integer
              rate:
                type: integer
                description: The most recent reported comparison rate of the system (comparisons per second).
          examples:
            application/json:
              - status: "ok"
                number_mappings: 3118
                rate: 1793757
        '500':
          description: | 
            System is experiencing difficulties. 
            E.g. application can't connect to database.
  /version:
    get:
      summary: Version
      description: |
        Return version numbers of libraries used.
      responses:
        '200':
          description: Versions
          schema:
            type: object
            properties:
              anonlink:
                type: string
              entityservice:
                type: string
              libc:
                type: string
              python:
                type: string
          examples:
            application/json:
              {"anonlink": "0.6.3", "entityservice": "v1.7.2", "libc": "glibc2.2.5", "python": "3.6.4"}
  /projects:
    get:
      summary: List of record linkage projects.
      description: |
        List of all privacy preserving record linkage projects.

        TODO MOVE TO /runs
        `'time_added'`, `'time_started'` and `'time_completed'` are represented in
        [ISO 8601 format](https://docs.python.org/3/library/datetime.html#datetime.datetime.isoformat).
        Note that the value will be `null` if the mapping has not yet started or completed.
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/ProjectList'
    post:
      summary: Create and configure a new linkage project.
      description: |
        Prepare resources and endpoints to accept CLK uploads from data providers.
        Provides the caller with credentials that will be required for any further
        interaction with this mapping.


        ### Schema
        
        Although these comprise the column names, the raw data will never be
        sent to this entity service. 
        
        
        Each participant will be able to see the schema to verify it is
        what they expect. Schema details should have been determined and agreed 
        on by each party before starting a mapping task. This is documented
        in [schema](./concepts.html#schema).
        
        ### Result Type
        
        The result type specifies what information is available after the entity
        resolving process has completed.
        
        Note
        `public_key` and `paillier_context` are only required if `result_type = "permutation"`.
        
      parameters:
        - in: body
          name: project
          required: true
          schema:
            $ref: '#/definitions/NewProject'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/NewProjectResponse'
 
  '/projects/{project_id}':
    get:
      summary: Description of a particular linkage project
      description: |
        TODO edit
        Depending on the completion of the entity matching process, the response contains either
        information about the current progress (503), or the result (200) of the mapping with the provided mapping-id.

        This endpoint requires authorization. A header with the name `Authorization`, set to a valid token must be
        set to access this API.

        The parts of the computed linkage results that are accessable by the different tokens depends on the
        `result_type` of the mapping:

        - `"mapping"` or `"similarity_scores"`\
          If the `result_type` is `"mapping"` or `"similarity_scores"` then the results can be accessed with the
        `result-token``token`, which is provided when initially creating the mapping.

        - `"permutation"`\
        If the `result_type` is `"permutation"` then the data provider can access their respective permutation and the
        encrypted mask with their respective `receipt-token`, which they obtain when adding data to the mapping.

        - `"permutation_unenecrypted_mask"`\
        If the `result_type` is `permutation_unenecrypted_mask`, then the mask can be access with the `result-token`,
          and the permutations are obtained by providing `receipt-token`.
        
        
        ## Response
        
        The response schema depends on the mapping's `result_type`. OpenAPI doesn't
        allow different schemas (in v2) so these are documented here:
        
        
        ### result_type = "mapping"

        The mapping of indices between parties. Data is returned as `json` object e.g,
      
            {
                "mapping":
                    {
                        "0": "5",
                        "2": "0"
                    }
            }

        
        ### result_type = "similarity_scores"

        The list of the indices of potential matches and their similarity score
        where the similarity score is greater than the mapping threshold.
        Data is returned as `json` object e.g.,

            {
                "similarity_scores":
                    [
                        [5, 27, 1.0],
                        [14, 10, 1.0]
                    ]
            }


        The element in the list is of the following format `[indexA, indexB, score]`,
        where `indexA` refers to the index of entity from data provider 1, `indexB` is the index of entity
        from data provider 2 that is a potential match to entity in `indexA`, and `score` is the similarity score
        representing the likelihood that entity in `indexA` and entity in `indexB` is a match.

        `indexA` and `indexB` starts from 0.

        The value of `score` is between 0.0 and 1.0, where 0.0 corresponds to no match
        and 1.0 corresponds to total match.

        ### result_type = "permutation"
        
        The permutation, and mask specific for the calling organisation.
        Data is returned as `json` object e.g,
        
        
            {
                "permutation": [3,0,4,1,2],
                "mask": [0,1,0,1,1],   <-- As paillier encrypted, base64 encoded numbers
                "paillier_context": {
                    "base": 2,
                    "encoded": true
                }
            }
          
        
        In this example the first three elements in the original dataset are included,
        but have been reordered to the second, fourth and fifth positions. The other elements
        have been excluded with the encrypted mask. Note the permutation is specific to
        the caller. Also any data after row 5 is to be discarded after the reordering has
        been applied.
        
        The `mask` is a json array of Paillier encrypted numbers. These are the ciphertexts
        as integer strings. The encoded number base is `2`, and the precision is set to
        `1e3`. The exponent is not serialized, as it will always be 0. The resulting ciphertext
        is serialized with base64 encoding.
        
        In Python using `python-paillier`: `int_to_base64(public_key.encrypt(enc, precision).ciphertext())`
        
        
        ### result_type = "permutation_unencrypted_mask"
        
        The data providers will receive the permutation:
        
            
            {
                "permutation": [3,0,4,1,2],
                "rows": 5
            }
        
        
        The creator of the mapping gets access to the mask:
            
            {
                "mask": [0,1,0,1,1]
            }
            
        
        The mask is an array of 0/1 numbers.

      parameters:
        - $ref: '#/parameters/token'
        - $ref: '#/parameters/project_id'
        
      responses:
        '401':
          description: Not Authenticated
          schema:
            $ref: '#/definitions/AuthError'
        '403':
          description: Invalid authentication or mapping not found.
        '500':
          description: |
            Fail to return description because the server has had a problem.
        '503':
          description: |
            Client is rate limited. Try requesting less frequently.
        '200':
          description: Project description
          schema:
            $ref: '#/definitions/ProjectDescription'
    delete:
      summary: Delete linkage project.
      description: Remove the project and all associated data from the service.
      parameters:
        - $ref: '#/parameters/project_id'
      responses:
        '204':
          description: Successfully deleted
        '403':
          description: Project not present or invalid authorization

  '/projects/{project_id}/clks':
    post:
      summary: Upload CLK data to a linkage project.
      description: |
        Called by each of the data providers with their calculated `CLK` vectors.
        The project must have been created, and the caller must have both the
        `project_id` and a valid `upload_token` in order to contribute data.

        This endpoint supports `Transfer-Encoding =  chunked` (streaming uploads).
        
        When the second party successfully adds data the matching task is queued;
        although it is worth noting there is no indication to the caller that this
        has occurred.
        
        The data uploaded is one [CLK](./concepts.html#cryptographic-longterm-keys) per entity/row.

        Note in the default deployment the maximum request size is set to `~10 GB`, which __should__
        translate to just over 20 million entities.
        
      parameters:
        - $ref: '#/parameters/project_id'
        - $ref: '#/parameters/token'
        - in: body
          name: clks
          required: true
          schema:
            $ref: '#/definitions/CLKUpload'
      responses:
        '201':
          description: Data Uploaded
          schema:
            $ref: '#/definitions/UploadReceipt'
        '400':
          description: If required information is not provided, or wrong format
        '401':
          description: If the authentication token is not provided
        '403':
          description: If the authentication token is not valid, or the project isn't found.

  '/projects/{project_id}/runs':
    get:
      summary: List runs
      description: |
        List of run summaries.
        Requires auth(?)
      responses:
        200:
          description: List of runs
          schema:
            $ref: '#/definitions/RunList'
    post:
      summary: Create a new run
      description: |
        Queue up a computation to compare entities.
      parameters:
        - in: body
          name: run
          required: true
          schema:
            $ref: '#/definitions/NewRun'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/NewRunResponse'


  '/projects/{project_id}/runs/{run_id}':
    get:
      summary: TODO

    delete:
      summary: Delete linkage project.
      description: Remove the project and all associated data from the service.
      parameters:
        - $ref: '#/parameters/project_id'
      responses:
        '204':
          description: Successfully deleted
        '403':
          description: Project not present or invalid authorization

  '/projects/{project_id}/runs/{run_id}/status':
    parameters:
    - $ref: '#/parameters/project_id'
    - $ref: '#/parameters/run_id'
    get:
      summary: Run status
      description: A status update on a particular record linkage run.
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/RunStatus'

parameters:
  token:
    required: true
    type: string
    name: Authorization
    in: header
  project_id:
    in: path
    name: "project_id"
    description: Resource identifier of the record linkage project
    required: true
    type: string
  run_id:
    in: path
    name: "run_id"
    description: Resource identifier of a particular run in a record linkage project
    required: true
    type: string

definitions:

  AuthError:
    type: object
    properties:
      message:
        type: string
      
  ProjectList:
    type: array
    items:
      type: object
      description: Listing of projects.
      properties:
        project_id:
          type: string
        time_added:
          type: string
          description: ISO8601 formated datetime
          format: 'date-time'

  Schema:
    type: object
    description: |
      The `schema` is described at in the [clkhash](http://clkhash.readthedocs.io/en/latest/schema.html)
      documentation.
    #$ref: 'http://clkhash.readthedocs.io/en/latest/_static/schema.json#hashing-schema'

  ResultType:
    type: string
    description: defines the output type of the mapping
    enum:
      - similarity_scores
      - mapping
      - permutation
      - permutation_unencrypted_mask

  RunState:
    type: string
    description: What state is the run in
    enum:
      - queued
      - running
      - completed
      - error

  RunProgress:
    description: Details how far completed the run is.
    type: object
    properties:
      total:
        description: Number of comparisons required for this Match
        type: number
        format: int
      current:
        type: number
        format: int
        description: How many comparisons have been carried out.
      progress:
        type: number
        description: |
          Decimal between 0.0 and 1.0 indicating progress. For now equal to
          current/total.

  PaillierPublicKey:
    description: https://python-paillier.readthedocs.io/en/develop/serialisation.html#jwk-serialisation
    type: object
    properties:
      n:
        type: string
      kty:
        type: string
        default: "DAJ"
      kid:
        type: string
      key_ops:
        type: array
        items:
          type: string
      alg:
        type: string
        default: "PAI-GN1"

  PaillierContext:
    description: Information on the Paillier encoding
    type: object
    properties:
      encoded:
        type: boolean
      base:
        type: integer

  NewProject:
    description: Configuration for a new linkage project.
    type: object
    properties:
      schema:
        $ref: '#/definitions/Schema'

      result_type:
        $ref: '#/definitions/ResultType'

      public_key:
        $ref: "#/definitions/PaillierPublicKey"
        
      paillier_context:
        $ref: "#/definitions/PaillierContext"

    required:
      - schema
      - result_type

  ProjectDescription:
    allOf:
      - $ref: '#/definitions/NewProject'
      - type: object
        properties:
          resource_id:
            type: string

  NewProjectResponse:
    properties:
      resource_id:
        type: string
      update_tokens:
        type: array
        description: Array of unique tokens authorizing the upload of CLKs.
        items:
          type: string
      result_token:
        description: A token required to access mapping results.
        type: string

  NewRun:
    description: Configuration for a new linkage calculation (run)
    type: object
    properties:
      threshold:
        type: number
        format: double
        default: 0.95
        description: |
          The similarity threshold (a number between 0 and 1) above which two entites will be considered a match.

  RunDescription:
    allOf:
      - $ref: '#/definitions/NewRun'
      - type: object
        properties:
          run_id:
            type: string

  NewRunResponse:
    allOf:
      - $ref: '#/definitions/NewRun'
      - type: object
        properties:
          run_id:
            type: string

  RunList:
    type: array
    items:
      type: object
      description: Listing of runs.
      properties:
        run_id:
          type: string
        time_added:
          type: string
          description: ISO8601 formated datetime
          format: 'date-time'
        state:
          type: string
          $ref: '#/definitions/RunState'

  RunStatus:
    properties:
      state:
        type: string
        $ref: '#/definitions/RunState'
      message:
        type: string
      progress:
        type: object
        $ref: '#/definitions/RunProgress'
      time_added:
        type: string
        format: 'date-time'
      time_started:
        type: string
        format: 'date-time'
      time_completed:
        type: string
        format: 'date-time'

  CLKUpload:
    description: Array of this party's Bloom Filters
    type: array
    items:
      type: string
      format: byte
      description: Base64 encoded CLK data
      
  UploadReceipt:
    properties:
      receipt-token:
        type: string
      message:
        type: string
